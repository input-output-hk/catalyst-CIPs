; CIP-36 Registration, Delegation or Deregistration
; This Schema is limited to Project Catalyst.  Custom implementaionts will need to modify
; this schema for their own use by defining there own purposes.

; The full set of CIP-36 defined Registration, Delegation or Deregistration transaction metadata
catalyst_registration_cbor = (
  cip15_voter_registration_cbor /
  cip36_voter_registration_cbor /
  voter_delegation_cbor /
  deregistration_cbor
)

; Witness for a stake key credential or voter public key
; Raw bytes of the ed25519 Public Key
$ed25519_public_key /= bytes .size 32

; Witness for an ed25519 public key
; Raw bytes of the ed25519 Signature with the Private key
$ed25519_signature /= bytes .size 64


; Voter Key and Witness
$vote_pub_key /= $ed25519_public_key
$vote_key_witness /= $ed25519_signature

; Weight assigned to a voters delegation
$weight /= uint .size 4

; Voters Keys or Weighted Delegation
delegation = [ $vote_pub_key, $weight ]
; NOTE: CBOR can not check it, but this is ONLY valid if at least 1 entry is a
; registered representative vote pub key.
; Unknown or catalyst_voter vote pub keys are invalid and will be ignored from
; the delegation if present.  They will be excluded from the delegation, and the
; weight applied to them will not be used.
multi_delegation = [ + delegation ]

; Payment Address
; Legacy Stake Reward Addresses are unpayable and are 29 bytes long.
; Shelly Payment addresses are payable and are either 57 or 29 bytes long.
; CDDL Can not enforce these lengths other than the maximum,
; therefore the size must be manually validated.
$payment_address /= bytes .size 57

; Transaction Nonce,  highest nonce defines latests registration.
$nonce /= uint

; The defined voting purposes.
voting-purposes = (
  catalyst_voter: 0,
  catalyst_representative: 1,
  ; Documentation ONLY,  So that 2-999 will not validate until defined.
  ; catalyst_reserved: uint(2..999),
  ; Allow Custom Voting Purposes - Catalyst will not use these.
  ; custom: uint(1000..4294967295),
)
voting-purpose = &voting-purposes

; Stake credential used to derive voting power.
$stake_credential /= $ed25519_public_key
$stake_witness /= $ed25519_signature

; All Registration Records have these fields.
common_registration = (
	2: $stake_credential,
	3: $payment_address,
	4: $nonce,
)

; The format which defines a voter is registering.
; Defined ONLY for CIP-15 compatibility, MUST not be used for CIP-36 or CIP-62.
cip15_voter_registration = {
	1: vote_pub_key,
  common_registration,
}

; CIP-15 Registrations must NOT have a voter witness.
; CIP-15 Registrations can NOT have the same voter key as any valid CIP-36 registration.
; CIP-36 can ONLY be valid if at least 1 CIP-36 registration exists with a Vote Key witness.
; Otherwise multiple CIP-15 Registrations with the same Voter key will have their voting power
; added together.
cip15_registration_witness = {
  1: $stake_witness
}

; The format which defines a CIP-36 voter registration.
cip36_voter_registration = {
	1: vote_pub_key,
  common_registration,
	5: voting_purposes => uint .eq catalyst_voter,
}

; At least ONE CIP-36 registation MUST have a voter_witness, otherwise all registrations
; with the same voter pub key are invalid.
cip36_registration_witness = {
  1: $stake_witness
  ? 2: $voter_witness
}

; Catalyst Representative Registration
representative_registration = {
	1: vote_pub_key,
  common_registration,
	5: voting_purposes => uint .eq catalyst_representative,
}

; Catalyst Representative Witness.
representative_witness = {
  1: $stake_witness
  2: $voter_witness
}

; Catalyst Delegation Registration for a voter.
delegation_registration = {
	1: multi_delegation,
  common_registration,
	5: voting_purposes => uint .eq catalyst_voter,
}

; Catalyst Delegation Witness.
delegation_witness = {
  1: $stake_witness
}

; CIP15 Format Voter Registration - Does not require a vote pub key witness.
; Registeres as a Voter.
cip15_voter_registration_cbor = {
  61284: cip15_voter_registration,
  61285: cip15_registration_witness
}

; CIP36 Format Voter Registration - At last 1 requires a vote pub key witness.
; Registeres as a Voter.
cip36_voter_registration_cbor = {
  61284: cip36_voter_registration,
  61285: cip36_registration_witness
}

; CIP36 Format Delegation
; Allows a Voter to delegate their voting power to 1 or more registered representitives.
; Delegation will be invalid if the delgation array does not contain at least 1 valid representative.
voter_delegation_cbor = {
  61284: delegation_registration,
  61285: delegation_witness
}

; If valid, removes all previous registrations for the purpose stated.
key_deregistration = {
  2: $stake_credential,
  4: $nonce,
  5: voting_purposes => uint,
}

; Proof that the deregistration holds the stake key being deregisted.
deregistration_witness = {
  1: $stake_witness
}

; CIP36 Format Deregistration.
deregistration_cbor = {
  61286: key_deregistration,
  61285: deregistration_witness
}
